"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
# Take environment variables from .env file
environ.Env.read_env(BASE_DIR / '.env')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure--))lt+w!b)ac1j)b7+5^sc@@l3maod6qt8n)4tj-4jtoey)iu!"
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = env.bool('DEBUG')

# INTERNAL_IPS = [
#     '127.0.0.1',
# ]
# ALLOWED_HOSTS = [
#     "localhost:3000",
#     "localhost",
#     "localhost:80",
#     "localhost:443",
#     '.ngrok-free.app',
#     "*:*"

# ]
ALLOWED_HOSTS = env('ALLOWED_HOSTS').strip().split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # static files
    "django.contrib.staticfiles",
    # rest framework
    "rest_framework",
    # auth
    # 'rest_framework.authtoken',
    'djoser',
    'oauth2_provider',
    # cors
    "corsheaders",
    # debugger
    'debug_toolbar',
    # silk inspection
    # 'silk',
    # swagger ui
    "drf_spectacular",
    # "drf_spectacular_sidecar",  # required for Django collectstatic discovery, static files for swagger, redoc CDN
    "djangorestframework_camel_case",
    # apps
    "api",
    "products",
    "orders",
    "shopping_cart",
    "payments",
]

MIDDLEWARE = [
    # cors
    "corsheaders.middleware.CorsMiddleware",
    # defaults
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # debugger
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # silk inspection
    # 'silk.middleware.SilkyMiddleware',
    # camel case middleware
    'djangorestframework_camel_case.middleware.CamelCaseMiddleWare',
    # static
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS')
CORS_ORIGIN_ALLOW_ALL = env.bool('CORS_ALLOW_ALL_ORIGINS')

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly",
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',

        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',

    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": env('PAGE_SIZE'),
    # "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",

    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # Any other renders
    ),
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # Any other parsers
    ),
    'JSON_UNDERSCOREIZE': {
        'no_underscore_before_number': True,
        # "ignore_fields": ("",),
        "ignore_keys": ("SKU",),
    },
}

SPECTACULAR_SETTINGS = {
    "TITLE": "E-COMMERCE API",
    "DESCRIPTION": "E-COMMERCE project description",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
    # "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    # "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    # "REDOC_DIST": "SIDECAR",

    'POSTPROCESSING_HOOKS': ['drf_spectacular.contrib.djangorestframework_camel_case.camelize_serializer_fields'],
    'CAMELIZE_NAMES': True,  # Enable camel case for schema names
    # OTHER SETTINGS
    # Dictionary of general configuration to pass to the SwaggerUI({ ... })
    # https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/
    # The settings are serialized with json.dumps(). If you need customized JS, use a
    # string instead. The string must then contain valid JS and is passed unchanged.
    "SWAGGER_UI_SETTINGS": {"deepLinking": True, "tryItOutEnabled": True},
}

# JSON_CAMEL_CASE = {
#     'RENDERER_CLASS': 'drf_orjson_renderer.renderers.ORJSONRenderer'
# }
# AUTH_USER_MODEL = 'api.User'

# Simple JWT settings config
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer', 'JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(
        days=env.int('ACCESS_TOKEN_LIFETIME_DAYS')
    ),
    # 'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION' #default
    # 'AUTH_HEADER_NAME':'HTTP_X_ACCESS_TOKEN'
}

# Djoser config
DJOSER = {
    #    # 'SERIALIZERS': {
    #    #     'user_create': 'config.serializers.UserCreateSerializer',
    #    #     'current_user': 'config.serializers.UserSerializer',
    #    #     'user': 'config.serializers.UserSerializer',
    #    # },
    'SEND_ACTIVATION_EMAIL': env.bool('SEND_ACTIVATION_EMAIL'),
    #    # 'ACTIVATION_URL': 'auth/activate/?uid={uid}&token={token}',
    'ACTIVATION_URL': 'auth/users/activation/?uid={uid}&token={token}',
    #    # 'PASSWORD_RESET_CONFIRM_URL': 'auth/reset-password/?uid={uid}&token={token}',
    'PASSWORD_RESET_CONFIRM_URL': 'auth/users/reset_password/?uid={uid}&token={token}',
    'PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND': True
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db.sqlite3",
    # }
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'django_e_commerce',
    #     'USER': 'root',
    #     'PASSWORD': 'pass',
    #     'HOST': 'localhost',
    #     'PORT': '3306',
    # }

    #  'default': {
    #     'ENGINE': 'django.db.backends.postgresql',
    #     'ENGINE': 'django.db.backends.mysql',
    #     'ENGINE':   'django.db.backends.mariadb', # for MariaDB
    #     'NAME': 'database_name',
    #     'USER': 'root',
    #     'PASSWORD': 'pass',
    #     'HOST': 'localhost',
    #     'PORT': '5432',
    # }

    # read os.environ['DATABASE_URL'] and raises
    # ImproperlyConfigured exception if not found
    #
    # The db() method is an alias for db_url().
    'default': env.db(),

    # read os.environ['SQLITE_URL']
    'extra': env.db_url(
        'SQLITE_URL',
        default='sqlite:///db.sqlite3'
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LOGIN_URL = '/admin/login/'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = '/media/'

# Purpose: This setting is used to specify additional directories where Django should look for static files during development.
# Usage: It's a list of filesystem paths where Django will search for additional static files besides the static files in each app's static directory.
# STATICFILES_DIRS is used to specify additional locations for static files during development.
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Optional: Add this if you want to store static files in a 'static' folder within your project
    BASE_DIR / "assets",
]

# Purpose: This setting is used to specify the directory where all the static files will be collected when you run the collectstatic management command.
# Usage: It's a single directory where Django will collect all static files for deployment.
# STATIC_ROOT is used to specify a single location where all static files are collected for deployment.
STATIC_ROOT = BASE_DIR / 'staticfiles'
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR/'debug.log',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['console'],
        },
        'django': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
